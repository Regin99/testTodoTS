{"version":3,"sources":["redux/actions.ts","redux/reducer.ts","redux/store.ts","components/InputTodo/InputTodo.tsx","hooks/useInputText.ts","components/TodoList/TodoItem/TodoItem.tsx","components/ActionPanel/SelectAllButton/SelectAllButton.tsx","components/ActionPanel/DeleteButton/DeleteButton.tsx","components/ActionPanel/ActionPanel.tsx","components/TodoList/TodoList.tsx","components/App/App.tsx","components/BackgroundImage/background.png","components/BackgroundImage/BackgroundImage.tsx","index.tsx"],"names":["ADD_TODO","DELETE_TODO","TOGGLE_TODO","SELECT_ALL","initialState","id","text","checked","localStorageTodos","localStorage","getItem","todos","JSON","parse","persistedState","length","store","createStore","state","action","type","filter","todo","map","subscribe","setItem","stringify","getState","useAppDispatch","useDispatch","useAppSelector","useSelector","InputTodo","dispatch","input","useState","value","setValue","onChange","event","target","clear","useInputText","className","onSubmit","e","preventDefault","Date","now","placeholder","TodoItem","todoText","SelectAllButton","onClick","DeleteButton","ActionPanel","TodoList","App","BackgroundImage","src","image","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2963f2f.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SELECT_ALL = \"SELECT_ALL\";\r\n","import { ToDo, ActionType } from \"./types\";\r\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO, SELECT_ALL } from \"./actions\";\r\n\r\nconst initialState: ToDo[] = [\r\n  {\r\n    id: 0,\r\n    text: \"buy car\",\r\n    checked: false,\r\n  },\r\n  {\r\n    id: 1,\r\n    text: \"buy pen\",\r\n    checked: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"buy milk \",\r\n    checked: false,\r\n  },\r\n];\r\n\r\nconst localStorageTodos = localStorage.getItem(\"todos\");\r\nconst todos = localStorageTodos ? JSON.parse(localStorageTodos) : initialState;\r\nconst persistedState = todos.length > 0 ? todos : initialState;\r\n\r\nexport const reducer = (state: ToDo[] = persistedState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [...state, { id: action.id, text: action.text, checked: false }];\r\n    case DELETE_TODO:\r\n      return state.filter((todo) => !todo.checked);\r\n    case TOGGLE_TODO:\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo\r\n      );\r\n    case SELECT_ALL:\r\n      return state.map((todo) => ({ ...todo, checked: true }));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport const store = createStore(reducer);\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"todos\", JSON.stringify(store.getState()));\r\n});\r\n\r\ntype AppDispatch = typeof store.dispatch;\r\ntype RootState = ReturnType<typeof store.getState>;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useAppDispatch } from \"../../redux/store\";\r\nimport { ADD_TODO } from \"../../redux/actions\";\r\nimport { useInputText } from \"../../hooks/useInputText\";\r\nimport \"./style.scss\";\r\n\r\nexport const InputTodo = () => {\r\n  const dispatch = useAppDispatch();\r\n  const input = useInputText();\r\n  const handleClick = () => {\r\n    dispatch({\r\n      type: ADD_TODO,\r\n      text: input.value,\r\n      id: Date.now(),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"input-todo\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleClick();\r\n        input.clear();\r\n      }}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          input.onChange(e);\r\n        }}\r\n        value={input.value}\r\n        placeholder=\"What needs to be done?\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import { ChangeEvent, useState } from \"react\";\r\n\r\nexport const useInputText = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value);\r\n  };\r\n  const clearInput = () => {\r\n    setValue(\"\");\r\n  };\r\n  return {\r\n    value,\r\n    onChange: handleChange,\r\n    clear: clearInput,\r\n  };\r\n};\r\n","import { TOGGLE_TODO } from \"../../../redux/actions\";\r\nimport { useAppDispatch } from \"../../../redux/store\";\r\nimport \"./style.scss\";\r\n\r\ninterface TodoItemProps {\r\n  todoText: string;\r\n  checked: boolean;\r\n  id: number;\r\n}\r\n\r\nexport const TodoItem: React.FC<TodoItemProps> = ({\r\n  todoText,\r\n  checked,\r\n  id,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={() => {\r\n          dispatch({ type: TOGGLE_TODO, id: id });\r\n        }}\r\n      />\r\n\r\n      <span>{todoText}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { useAppDispatch } from \"../../../redux/store\";\r\nimport { SELECT_ALL } from \"../../../redux/actions\";\r\n\r\nexport const SelectAllButton = () => {\r\n  const dispatch = useAppDispatch();\r\n  const onClick = () => {\r\n    dispatch({ type: SELECT_ALL });\r\n  };\r\n\r\n  return <button onClick={onClick}>Select All</button>;\r\n};\r\n","import { useAppDispatch } from \"../../../redux/store\";\r\nimport { DELETE_TODO } from \"../../../redux/actions\";\r\n\r\nexport const DeleteButton = () => {\r\n  const dispatch = useAppDispatch();\r\n  const handleClick = () => {\r\n    dispatch({ type: DELETE_TODO });\r\n  };\r\n\r\n  return <button onClick={handleClick}>Clear Completed</button>;\r\n};\r\n","import { SelectAllButton } from \"./SelectAllButton/SelectAllButton\";\r\nimport { DeleteButton } from \"./DeleteButton/DeleteButton\";\r\nimport \"./style.scss\";\r\n\r\nexport const ActionPanel = () => {\r\n  return (\r\n    <div className=\"action-panel\">\r\n      <SelectAllButton />\r\n      <DeleteButton />\r\n    </div>\r\n  );\r\n};\r\n","import { TodoItem } from \"./TodoItem/TodoItem\";\r\nimport { useAppSelector } from \"../../redux/store\";\r\nimport \"./style.scss\";\r\nimport { ToDo } from \"../../redux/types\";\r\nimport { ActionPanel } from \"../ActionPanel/ActionPanel\";\r\n\r\nexport const TodoList = () => {\r\n  const todos = useAppSelector((state) => state);\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      {todos.map((todo: ToDo) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todoText={todo.text}\r\n          checked={todo.checked}\r\n          id={todo.id}\r\n        />\r\n      ))}\r\n      <ActionPanel />\r\n    </div>\r\n  );\r\n};\r\n","import { InputTodo } from \"../InputTodo/InputTodo\";\r\nimport { TodoList } from \"../TodoList/TodoList\";\r\nimport \"./style.scss\";\r\nexport const App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Todo</h1>\r\n      <InputTodo />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/background.fa4fe5df.png\";","import image from \"./background.png\";\r\nimport \"./style.scss\";\r\n\r\nexport const BackgroundImage = () => {\r\n  return (\r\n    <div>\r\n      <img src={image} alt=\"background\" className={\"background-image\"} />\r\n      <div className={\"background-image-overlay\"} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { App } from \"./components/App/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { BackgroundImage } from \"./components/BackgroundImage/BackgroundImage\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BackgroundImage />\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}